For file path or directory separator, the Unix system introduced the slash character / as directory separator, and the Microsoft Windows introduced backslash character \ as the directory separator. 

In Java, we can use the following three methods to get the platform-independent file path separator.

System.getProperty("file.separator")
FileSystems.getDefault().getSeparator() (Java NIO)
File.separator Java IO


flush() method flushes content of buffer to destination.And you can write something again into the stream.close() flushes content to destination and closes the stream. After close() you can't write anything anymore.

Buffer:

It is a region of a physical memory storage used to temporarily store data while it is being moved from one place to another. That physical memory storage would be RAM (Random-access memory) in most cases.


The java.io.InputStream.read() method reads the next byte of the data from the the input stream and returns int in the range of 0 to 255. If no byte is available because the end of the stream has been reached, the returned value is -1.


When to use Character Stream over Byte Stream? 

In Java, characters are stored using Unicode conventions. Character stream is useful when we want to process text files. These text files can be processed character by character. A character size is typically 16 bits.

When to use Byte Stream over  Character Stream? 

Byte oriented reads byte by byte.  A byte stream is suitable for processing raw data like binary files.
Notes:

Names of character streams typically end with Reader/Writer and names of byte streams end with InputStream/OutputStream
The streams used in example codes are unbuffered streams and less efficient. We typically use them with buffered readers/writers for efficiency. We will soon be discussing use BufferedReader/BufferedWriter (for character stream) and BufferedInputStream/BufferedOutputStream (for byte stream) classes.
It is always recommended to close the stream if it is no longer in use. This ensures that the streams wonâ€™t be affected if any error occurs.
The above codes may not run in online compilers as files may not exist.



BufferedInputStream vs FileInputStream and BufferedReader vs FileReader

Java BufferedInputStream class is used to read information from stream. It internally uses buffer mechanism to make the performance fast.
BufferedInputStream is much faster as compared to FileInputStream.

the simple example to read data of file using BufferedInputStream:
 try{    
    FileInputStream fin=new FileInputStream("D:\\testout.txt");    
    BufferedInputStream bin=new BufferedInputStream(fin);    
    int i;    
    while((i=bin.read())!=-1){    
     System.out.print((char)i);    
    }    
    bin.close();    
    fin.close();    
  }catch(Exception e){System.out.println(e);}    

Java BufferedOutputStream class is used for buffering an output stream. It internally uses buffer to store data. It adds more efficiency than to write data directly into a stream. So, it makes the performance fast.

In this example, we are writing the textual information in the BufferedOutputStream object which is connected to the FileOutputStream object. 

  FileOutputStream fout=new FileOutputStream("D:\\testout.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);    
     String s="Welcome to javaTpoint.";    
     byte b[]=s.getBytes();    
     bout.write(b);    
     bout.flush();    
     bout.close();    
     fout.close();    
     System.out.println("success");    

BufferedReader is much faster as compared to FileReader.


The BufferedReader class of Java is used to read the stream of characters from the specified source (character-input stream). The constructor of this class accepts an InputStream object as a parameter.

This class provides a method named read() and readLine() which reads and returns the character and next line from the source (respectively) and returns them.

Instantiate an InputStreamReader class bypassing your InputStream object as a parameter.

Then, create a BufferedReader, bypassing the above obtained InputStreamReader object as a parameter.

Now, read data from the current reader as String using the readLine() or read() method.